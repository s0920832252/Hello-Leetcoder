https://leetcode.com/problems/reverse-bits/?tab=Description
Runtime: 2 ms
You are here! 
Your runtime beats 46.37% of java submissions.
https://leetcode.com/submissions/detail/95353483/


public class Solution {
    // you need treat n as an unsigned value
    public int reverseBits(int n) {
        //把兩bit位數先用&1 取出後,判斷此bit值是否需要做交換.
        //若需要,則用<< 去製造具有此兩bit數字的位置數字.
        //再用n^= 運算  去判斷是否有更新數字(與上次結果不同bit數字),   以此不斷更新數字.
	    for (int i = 0; i < 16; i++) {
		    n = swapBits(n, i, 32 - i - 1);
	    }
	    return n;
    }
 
    public int swapBits(int n, int i, int j) {
	    int a = (n >> i) & 1;
	    int b = (n >> j) & 1;
 
	    if ((a ^ b) != 0) {
		    return n ^= (1 << i) | (1 << j);
	    }
    	return n;
    }
}
