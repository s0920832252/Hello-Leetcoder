/*
https://leetcode.com/problems/invert-binary-tree/
You are here! Runtime: 1 ms
Your runtime beats 0.52% of javasubmissions.
https://leetcode.com/submissions/detail/55326999/
idea: 地回走訪,左右中,在中的時候交換兩子樹
*/


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode invertTree(TreeNode root) {
       if (root==null)
         return null;
    
     
        invertTree(root.left);
        invertTree(root.right);
        swap(root);
       
       return root;
        
    }
    
    public void swap(TreeNode root1)
    {
        TreeNode temp=new TreeNode(root1.val);
        temp.left=root1.right;
        root1.right=root1.left;
        root1.left=temp.left;
     
    }
}

==========
============

/*
https://leetcode.com/problems/invert-binary-tree/
You are here! Runtime: 0 ms
Your runtime beats 21.92% of javasubmissions
https://leetcode.com/submissions/detail/55326954/
idea: 創temp樹 在地回走的時候,左右子樹交換的存入  
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode invertTree(TreeNode root) {
       if (root==null)
         return null;
         
       TreeNode temp=new TreeNode(root.val);
       temp.left=invertTree(root.right);
       temp.right=invertTree(root.left);
   
       return temp;
    }
}

==============
=================
Runtime: 0 ms
You are here! 
Your runtime beats 18.65 % of java submission
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode invertTree(TreeNode root) {
        tree(root);
        return root;
    }
    
    public void tree(TreeNode root)
    {
        if(root==null)
            return ;        
        tree(root.left);
        tree(root.right);
        swap(root);
    }
    
    public void swap(TreeNode root)
    {
        TreeNode temp=root.left;
        root.left=root.right;
        root.right=temp;
    }
}
