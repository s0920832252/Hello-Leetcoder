/*
https://leetcode.com/problems/maximum-depth-of-binary-tree/
You are here! Runtime: 1 ms
Your runtime beats 10.20% of javasubmissions.
https://leetcode.com/submissions/detail/54510021/
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
   public int maxDepth(TreeNode root) {
       int left=0,right=0;
       if(root == null) return 0;
       if(root.left==null && root.right==null)
         return 1;
       if(root.left==null)
         return maxDepth(root.right)+1;
       else if(root.right==null)
         return maxDepth(root.left)+1;
       else     
       { right = maxDepth(root.right)+1;
         left = maxDepth(root.left)+1;
         return Math.max(left,right);  
       }
       
   }
}

====================================
======================================
/*
https://leetcode.com/problems/maximum-depth-of-binary-tree/
You are here! Runtime: 1 ms
Your runtime beats 10.20% of javasubmissions.
https://leetcode.com/submissions/detail/54503425/
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int maxDepth(TreeNode root) {
       
        if(root==null)
        {
            return 0;
        }
        int left=(maxDepth(root.left)+1);
        int right=(maxDepth(root.right)+1);
        if(left>=right)
        {
            root.val=left;
        }
        else
        {
            root.val=right;
        }
        
        return root.val;
    }
}

=============
===============

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int level=0;
    public int maxDepth(TreeNode root) {
        if (root==null)
            return level;
        findDepth(root,1);
        return level;
    }
    
    public void findDepth(TreeNode root,int stair)
    {
        if(root==null)
            return;
        if (stair>level)
            level=stair;
        findDepth(root.left,stair+1);
        findDepth(root.right,stair+1);
    }
}
