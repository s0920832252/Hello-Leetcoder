https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/?tab=Description
Runtime: 1 ms
You are here! 
Your runtime beats 66.98% of java submissions.
https://leetcode.com/submissions/detail/95521596/



public class Solution {
    public int maxProfit(int[] prices) {
        //與這題相同https://leetcode.com/problems/best-time-to-buy-and-sell-stock/?tab=Description
        //差別在於從只准一次買賣變成允許多次買賣.
        //概念仍然是greedy策略.
        //每一次都先找出目前最高的賣價,在去判斷此買價是否有利潤可言
        
        int sellPrice=0,profit=0;
        for(int i=prices.length-1;i>=0;i--)
        {
            if(prices[i]>sellPrice)
                sellPrice=prices[i];
            else if(sellPrice-prices[i]>0)
            {
                profit+=sellPrice-prices[i];
                sellPrice=prices[i];//題目允許馬上賣,馬上買,因此需考慮賣完後,馬上買的價錢.
            }
        }
        
        return profit;
    }
}



============================
=============================


class Solution {
    public int maxProfit(int[] prices) {
        int buyPrice=Integer.MAX_VALUE, profit=0;
        for(int i=0;i<prices.length;i++)
        {
            if(buyPrice>prices[i])
                buyPrice=prices[i];
            else if(prices[i]-buyPrice>0)
            {
                profit+=prices[i]-buyPrice;
                buyPrice=prices[i];
            }
        }
        return profit;        
    }
}


------------------------------------------------------------------------------------
====================================================================================

https://leetcode.com/submissions/detail/95522389/
Runtime: 1 ms
You are here! 
Your runtime beats 66.98% of java submission


public class Solution {
    public int maxProfit(int[] prices) {
        //網路上其他人的做法. 蠻下賤的.
        //由於允許多次買賣以及馬上賣 馬上買
        //因此不需要去判斷目前的賣價是否為最高賣價
        //只要評估陣列差是否為正即可.
        //舉例 [1,3,2,4,9] 計算過程如下
        //(9-4) + (4-2) + '(2-3)不要 + (3-1) = 9
        
        int profit=0;
        for(int i=prices.length-1;i>0;i--)
        {
            if(prices[i]-prices[i-1]>0)
                profit+=prices[i]-prices[i-1];
        }
        
        return profit;
    }
}
