https://leetcode.com/problems/intersection-of-two-arrays-ii/
Runtime: 6 ms
You are here! 
Your runtime beats 64.88% of java submissions
https://leetcode.com/submissions/detail/92422185/



public class Solution {
    public int[] intersect(int[] nums1, int[] nums2) {
        //空陣列必定不會有交集所以回傳[];
        if(nums1.length==0 || nums2.length==0) return new int[0];
        
        //為了題目提示的Tag: BinarySearch做的 , 二分搜尋法必須在有排序的array使用
        //為了要用二分搜尋法, 所以每次找到那個數字後, 要移項.以保持大小的順序.
        //反正就是找出nums2的數字後,用二分搜尋法,去看nums1的數字是否有
        
        List<Integer> list =new ArrayList<Integer>();
        int findCount=0;
        Arrays.sort(nums1);
        for(int i=0;i<nums2.length;i++)
        {
            if(binarySearch(nums1,findCount,nums1.length-1,nums2[i]))
            {   
                list.add(nums2[i]);
                findCount++;
            }
        }
        
        int ans[]=new int [list.size()];
        for(int j=0;j<list.size();j++)
            ans[j]=list.get(j);
        
        return ans;
    }
    
    public boolean binarySearch(int nums[],int left,int right,int target)
    {
        int index,value;
        
        while(left<=right)
        {
            index=(left+right)/2;
            value=nums[index];
            if(value>target)
                right=index-1;
            else if (value < target)
                left=index+1;
            else
            {
                for(int i=index-1;i>=0;i--)
                    nums[i+1]=nums[i];
                return true;
            }
                
        }
        return false;
    }
}


============

https://leetcode.com/problems/intersection-of-two-arrays-ii/
Runtime: 7 ms
You are here! 
Your runtime beats 43.23% of java submissions.
https://leetcode.com/submissions/detail/92418358/


public class Solution {
    public int[] intersect(int[] nums1, int[] nums2) {
        //操作map 紀錄nums1的數字各有幾個
        //再去看nums2的數字 與 nums1 的相同多少, 相同的 存入 list內 (不用array的原因是,不知道交集數目是多少)
        
        Map<Integer,Integer> map=new HashMap<Integer,Integer>();
        List<Integer> list = new ArrayList<Integer> ();
        int count=0;
        for(int member : nums1)
        {
            if(map.containsKey(member))
                map.put(member,map.get(member)+1);
            else
                map.put(member,1);
        }
        
        for(int member : nums2)
        {
            if(map.containsKey(member))
            {
                int value=map.get(member);
                if(value>0)
                {
                    list.add(member);
                    map.put(member,value-1);
                }    
            }   
        }
        
        int ans[]=new int[list.size()];
        for(int i=0;i<list.size();i++)
            ans[i]=list.get(i);
        return ans;
    }
}

======================

https://leetcode.com/problems/intersection-of-two-arrays-ii/
Runtime: 4 ms
You are here! 
Your runtime beats 82.62% of java submissions
https://leetcode.com/submissions/detail/92416059/



public class Solution {
    public int[] intersect(int[] nums1, int[] nums2) {
        //sort後 用two point 操作array的技巧  太常用了XDD
        //反正,相同的數字 就是交集之一了!! 加入答案就對了Q
        
        Arrays.sort(nums1);
        Arrays.sort(nums2);
        List<Integer> list=new ArrayList<Integer>();
        for(int i=0,j=0;i<nums1.length && j<nums2.length;)
        {
            if(nums1[i]>nums2[j])
                j++;
            else if(nums1[i]<nums2[j])
                i++;
            else
            {
                list.add(nums1[i]);
                i++;
                j++;
            }
        }
        
        int ans[]=new int[list.size()];
        for(int i=0;i<list.size();i++)
            ans[i]=list.get(i);
        return ans;
        
    }
}


