https://leetcode.com/problems/contains-duplicate/
Runtime: 22 ms
You are here! 
Your runtime beats 21.69% of java submissions.
https://leetcode.com/submissions/detail/93301006/


public class Solution {
    public boolean containsDuplicate(int[] nums) {
        //因為set 不會記錄相同數字兩次,因此nums全加入set後,若有相同數字則nums.length以及set.size()必定不會相同
        
        Set<Integer> set=new HashSet<Integer>();
        
        for(int num : nums)
            set.add(num);
        
        return nums.length==set.size()? false:true;
    }
}

================================
=================================

https://leetcode.com/problems/contains-duplicate/
Runtime: 20 ms
You are here! 
Your runtime beats 43.38% of java submissions.
https://leetcode.com/submissions/detail/93300965/


public class Solution {
    public boolean containsDuplicate(int[] nums) {
        //走訪nums,若有相同的則回傳true. 透過使用set紀錄此數字是否出現過.
        
        Set<Integer> set=new HashSet<Integer>();
        for(int num : nums)
        {
            if(set.contains(num))
                return true;
            else
                set.add(num);
        }
        
        return false;
    }
}


=================================
===================================

https://leetcode.com/problems/contains-duplicate/
Runtime: 6 ms
You are here! 
Your runtime beats 91.22% of java submissions.
https://leetcode.com/submissions/detail/93301090/


public class Solution {
    public boolean containsDuplicate(int[] nums) {
        //排序後,相同的數字會相鄰.
        Arrays.sort(nums);
        for(int i=0 ; i<nums.length-1 ; i++)
            if((nums[i]^nums[i+1])==0)  //寫完後才發現,寫成這樣 if(nums[i]==nums[i+1])更省事 XD:  ,但發現用XOR的寫法時間似乎比較快一點點(?)
                return true;
        
        return false;
    }
}
