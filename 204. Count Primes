https://leetcode.com/problems/count-primes/#/description
Runtime: 22 ms
You are here! 
Your runtime beats 93.67% of java submissions.
https://leetcode.com/submissions/detail/97163262/

//用一個矩陣紀錄 找出的非質數,再去count有幾個質數.
public class Solution {
    public int countPrimes(int n) {
        boolean notPrimes[]=new boolean[n];//陣列初始值全部都是false.
        int ans=0;
        
        for(int i=2;i*i<n;i++)  //用i*i<n 而非  i<math.sqrt(n),因為i*i<n會比較快.
        {
            if(notPrimes[i]==false) 
                for(int j=2;i*j<n;j++)    //透過i找 非質數.
                    notPrimes[i*j]=true;
        }
        
        for(int i=2;i<notPrimes.length;i++)
            if(notPrimes[i]==false)
                ans++;
        
        return ans;
    }
}


========================================================
========================================================

Runtime: 14 ms
You are here! 
Your runtime beats 97.58% of java submissions.
https://leetcode.com/submissions/detail/97165442/

//我本來覺得我的方法已經快到爆炸了= =
//沒想到還能這樣解....
//因為2的倍數鐵定不是質數,因此連考慮都不用考慮. 同時2是最小的質數.
public class Solution {
    public int countPrimes(int n) {
        if(n<=2)
            return 0;
            
        boolean notPrimes[]=new boolean[n];
        int ans=1;
        
        for(int i=3;i*i<n;i=i+2)
        {
            if(notPrimes[i]==false)
                for(int j=i*i;j<n;j=j+i*2)
                    notPrimes[j]=true;
        }
        
        for(int i=3;i<notPrimes.length;i=i+2)
            if(notPrimes[i]==false)
                ans++;
        
        return ans;
    }
}
