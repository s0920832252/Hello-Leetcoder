https://leetcode.com/problems/longest-palindrome/#/description
Runtime: 9 ms
You are here! 
Your runtime beats 94.46 % of java submissions
https://leetcode.com/submissions/detail/104710016/

//以下三個方法均是以 先算出  成對字元的數目 再算是否有單一字元存在, 為基本概念.

public class Solution {
    public int longestPalindrome(String s) {
        int charTable[]=new int[128];
        char charStr[]=s.toCharArray();
        int pairCount=0;
        int hasOneChar=0;
        for(int i=0;i<charStr.length;i++)
            charTable[charStr[i]]++;
        for(int i=0;i<128;i++)
        {
            pairCount+=charTable[i]/2;
            charTable[i]%=2;
        }
        for(int i=0;i<128;i++)
            if(charTable[i]==1)
            {
                hasOneChar=1;
                break;
            }
        
        return pairCount*2+hasOneChar;
    }
}

===============================================================================
===============================================================================
Runtime: 9 ms
You are here! 
Your runtime beats 94.46 % of java submissions
https://leetcode.com/submissions/detail/104710617/

public class Solution {
    public int longestPalindrome(String s) {
        int charTable[]=new int[128];
        char charStr[]=s.toCharArray();
        int pairCount=0;
        int hasOneChar=0;
        for(int i=0;i<charStr.length;i++)
        {   
            int tmpeCount=++charTable[charStr[i]];
            if((tmpeCount%2)==0)
                pairCount++;
        }
        
        return pairCount*2>=charStr.length?pairCount*2:pairCount*2+1;
    }
}


===============================================================================
===============================================================================
Runtime: 9 ms
You are here! 
Your runtime beats 94.46 % of java submissions
https://leetcode.com/submissions/detail/104711160/

public class Solution {
    public int longestPalindrome(String s) {
        boolean charTable[]=new boolean[128];
        char charStr[]=s.toCharArray();
        int pairCount=0;
        for(int i=0;i<charStr.length;i++)
        {   
            charTable[charStr[i]]=!charTable[charStr[i]];
            if(!charTable[charStr[i]])
                pairCount++;
        }
        
        return pairCount*2>=charStr.length?pairCount*2:pairCount*2+1;
    }
}
