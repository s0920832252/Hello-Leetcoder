/*
https://leetcode.com/problems/same-tree/
You are here! Runtime: Runtime: 0 ms
Your runtime beats 14.90% of javasubmissions.
https://leetcode.com/submissions/detail/56722638/
*/


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public boolean isSameTree(TreeNode p, TreeNode q) {
        if(p==null && q==null)   //每次判斷的依據  結構/值
          return true;
        else if(p!=null && q!=null && p.val!=q.val)    
          return false; 
        else if(p!=null && q==null)
          return false;
        else if(p==null && q!=null)
          return false;
        
        return isSameTree(p.left, q.left)&&isSameTree(p.right, q.right);  //
        
      
    }
}




/*
https://leetcode.com/problems/same-tree/
You are here! Runtime: 1 ms
Your runtime beats 1.44% of javasubmissions.
https://leetcode.com/submissions/detail/56779318/
*/

 /**
 offer(E o)	boolean	加入物件
peek()	E	取得物件，若空傳回null
element()	E	取得物件，若空傳回例外
poll()	E	取得物件，並移除該物件，若空傳回null
remove()	E	取得物件，並移除該物件，若空傳回例外

java queue Tutorial
http://tutorials.jenkov.com/java-collections/queue.html
 */


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 
import java.util.Queue;
import java.util.LinkedList;
 
public class Solution {
    public boolean isSameTree(TreeNode p, TreeNode q) {
       if(p==null && q!=null)  //判斷當前的點是否相同
             return false;
       if(p!=null && q==null)
             return false;
       if(p==null && q==null)
             return true;
             
        
       Queue<TreeNode> q1=new LinkedList<TreeNode>();  // <define queue內資料型態>
       Queue<TreeNode> q2=new LinkedList<TreeNode>(); 
       TreeNode currP=p;    //指標 指向p   方便日後走訪操作
       TreeNode currQ=q;    //指標 指向q
       q1.offer(currP);     //加入queue
       q2.offer(currQ);
       
       //BFS走訪
       while( ((currP=q1.poll())!=null) && ((currQ=q2.poll())!=null) )//若兩邊queue非空 代表尚有node要比較
       {
           if(currP.val!=currQ.val)     //判斷當前值是否相同
             return false;
           if(currP.left==null && currQ.left!=null)//判斷左右兩兒子結構是否相同
             return false;
           else if(currP.left!=null && currQ.left==null)
             return false;     
           if(currP.right==null && currQ.right!=null)
             return false;
           else if(currP.right!=null && currQ.right==null)
             return false;
           
           if(currP.left!=null && currQ.left!=null)//判斷是否有非空兒子,有則加入queue 以待下一次比較.
           {
               q1.offer(currP.left);
               q2.offer(currQ.left);
           }
           if(currP.right!=null && currQ.right!=null)
           {
               q1.offer(currP.right);
               q2.offer(currQ.right);
           }
       }
       return true;  //走訪全部node 若無不同, 則return true
    }
}
