https://leetcode.com/problems/find-bottom-left-tree-value/?tab=Description
Runtime: 8 ms
You are here! 
Your runtime beats 74.54% of java submissions
https://leetcode.com/submissions/detail/94997321/


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    //用ans[1]記錄 目前找到的答案深度,用ans[0]記錄答案的值
    //用DFS全部走一遍.
    //這題用BFS解,應該也可以,不過今天沒時間寫了ORz
    public int ans[]=new int[2];
    public int findBottomLeftValue(TreeNode root) {
        int treeDepth=0;
        toFindBottomLeftValue(root,treeDepth);
        return ans[0];
    }
    
    public void toFindBottomLeftValue(TreeNode root,int treeDepth)
    {
        treeDepth++;
        if(root.right!=null)
            toFindBottomLeftValue(root.right,treeDepth);
        if(root.left!=null)
            toFindBottomLeftValue(root.left,treeDepth);
        if(treeDepth>=ans[1])
        {
            ans[0]=root.val;
            ans[1]=treeDepth;
        }
    }
}



---------------------------------------
另外看到別人的做法, 概念跟我差不多,只是她不是用全域變數,而是直接把陣列傳址傳下去了XDDD

public class Solution {
    public int findBottomLeftValue(TreeNode root) {
        return findBottomLeftValue(root, 1, new int[]{0,0});
    }
    public int findBottomLeftValue(TreeNode root, int depth, int[] res) {
        if (res[1]<depth) {res[0]=root.val;res[1]=depth;}
        if (root.left!=null) findBottomLeftValue(root.left, depth+1, res);
        if (root.right!=null) findBottomLeftValue(root.right, depth+1, res);
        return res[0];
    }
}
