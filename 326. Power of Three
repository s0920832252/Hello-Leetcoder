/*
https://leetcode.com/problems/power-of-three/
You are here! Runtime: 19 ms
Your runtime beats 33.19% of javasubmissions
https://leetcode.com/submissions/detail/55411618/
idea: log
*/

public class Solution {
    public boolean isPowerOfThree(int n) {
        double ans=Math.log10(n)/Math.log10(3);//n若是3的指數則ans必為整數
        if(ans-(int)ans==0.0) //
          return true;
        else 
          return false;
    }
}

============================
============================

/*
https://leetcode.com/problems/power-of-three/
You are here! Runtime: 18 ms
Your runtime beats 52.93% of javasubmissions
https://leetcode.com/submissions/detail/55411719/
idea: 卑鄙解
*/

public class Solution {
    public boolean isPowerOfThree(int n) {
        
        return (n == 1 || n == 3 || n == 9 || n == 27 || n == 81 || n == 243 || n == 729 || n == 2187 || n == 6561 || n == 19683 || n == 59049 || n == 177147 || n == 531441 || n == 1594323 || n == 4782969 || n == 14348907 || n == 43046721 || n == 129140163 || n == 387420489 || n == 1162261467);  
      
    }
}

============================
============================

/*
https://leetcode.com/problems/power-of-three/
You are here! Runtime: 68 ms
Your runtime beats 2.84% of javasubmissions
https://leetcode.com/submissions/detail/55401288/

idea: 地回解
*/

public class Solution {
    public boolean isPowerOfThree(int n) {
        int pows=0;
        return powOfthree(n,pows);
    }
    public boolean powOfthree(int n,int pows)
    {
        if(Math.pow(3,pows)==n)
          return true;
        else if(Math.pow(3,pows)>n)
          return false;
        else
          return powOfthree(n,++pows);
    }
}

============================
============================

/*
https://leetcode.com/problems/power-of-three/
You are here! Runtime: 14 ms
Your runtime beats 98.87% of javasubmissions.
https://leetcode.com/submissions/detail/55401892/
idea: 迴圈解
*/

public class Solution {
    public boolean isPowerOfThree(int n) 
    {  if(n==1)
         return true;
       while(n>0 && n%3==0)
       {
         n/=3;
         if(n==1)
           return true;
       }
       return false;
    } 
}

============================
============================

/*
https://leetcode.com/problems/power-of-three/
You are here! Runtime: 18 ms
Your runtime beats 52.93% of javasubmissions.
https://leetcode.com/submissions/detail/55410372/
idea: 若n為 pow_3  則 MAX_3_pow % n ==0
*/

public class Solution {
    public boolean isPowerOfThree(int n) {
        int MAX_3_pow=1162261467;
        if(n>0)
        {
            if(MAX_3_pow%n==0)
               return true;
            else
               return false;
        }
        else
        {
            return false;
        }
        
    }
}

============================
============================

class Solution {
    public boolean isPowerOfThree(int n) {
        return n==0?false:n%3==0?isPowerOfThree(n/3):n==1;            
    }
}

============================
============================

class Solution {
    public boolean isPowerOfThree(int n) {
        while(n>0 && n%3==0)
            n/=3;
        return n==1;            
    }
}
