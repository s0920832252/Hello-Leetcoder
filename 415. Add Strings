https://leetcode.com/problems/add-strings/
Runtime: 57 ms
You are here! 
Your runtime beats 14.65% of java submissions.
https://leetcode.com/submissions/detail/92281037/

//就把數字加總,沒啥XD:

public class Solution {
    public String addStrings(String num1, String num2) {
        char num1Char[]=num1.toCharArray();
        char num2Char[]=num2.toCharArray();
        int num1Index=num1Char.length-1;
        int num2Index=num2Char.length-1;
        int carry=0;
        int res=0;
        String ans="";
        
        while(num1Index>=0 || num2Index>=0)
        {
            res=0;
            if(num1Index>=0)
                res+=(num1Char[num1Index--]-'0');
            if(num2Index>=0)
                res+=(num2Char[num2Index--]-'0');
            ans=((res+carry)%10)+ans;
            carry=(res+carry)/10;
        }
        return carry==1? "1"+ans:ans;
    }
}

=============================================================================================================================


class Solution {
    public String addStrings(String num1, String num2) {
        String ans="";
        int carry=0;
        for(int i=num1.length()-1,j=num2.length()-1;i>=0 || j>=0;i--,j--)
        {
            int sum=0;
            if(i>=0)    sum+=num1.charAt(i)-'0';
            if(j>=0)    sum+=num2.charAt(j)-'0';
            ans=(sum+carry)%10+ans;
            carry= ((sum+carry)>=10)?1:0;                
        }
        return carry==1?1+ans:ans;
    }
}

=============================================================================================================================

https://leetcode.com/problems/add-strings/
Runtime: 25 ms
You are here! 
Your runtime beats 72.57% of java submissions
https://leetcode.com/submissions/detail/92281046/

//把數字加總,  但使用StringBuilder物件, 速度會比使用String 串接並指派 還要更快.
public class Solution {
    public String addStrings(String num1, String num2) {
        char num1Char[]=num1.toCharArray();
        char num2Char[]=num2.toCharArray();
        int num1Index=num1Char.length-1;
        int num2Index=num2Char.length-1;
        int carry=0;
        int res=0;
        StringBuilder ans=new StringBuilder();
        
        while(num1Index>=0 || num2Index>=0)
        {
            res=0;
            if(num1Index>=0)
                res+=(num1Char[num1Index--]-'0');
            if(num2Index>=0)
                res+=(num2Char[num2Index--]-'0');
            ans.append(((res+carry)%10));
            carry=(res+carry)/10;
        }
        if(carry==1)
            ans.append(1);
        return ans.reverse().toString();
    }
}

=============================================================================================================================

class Solution {
    public String addStrings(String num1, String num2) {
        StringBuilder ans=new StringBuilder();
        int carry=0;
        for(int i=num1.length()-1,j=num2.length()-1;i>=0 || j>=0;i--,j--)
        {
            int sum=0;
            if(i>=0)    sum+=num1.charAt(i)-'0';
            if(j>=0)    sum+=num2.charAt(j)-'0';
            ans.append((sum+carry)%10);
            carry= ((sum+carry)>=10)?1:0;                
        }
        return carry==1?1+ans.reverse().toString():ans.reverse().toString();
    }
}

=============================================================================================================================

https://leetcode.com/problems/add-strings/
Runtime: 20 ms
You are here! 
Your runtime beats 99.68% of java submissions.
https://leetcode.com/submissions/detail/92281004/

//加總,  使用char[] 保存,因此不需要多次串接的操作.
public class Solution {
    public String addStrings(String num1, String num2) {
        char num1Char[]=num1.toCharArray();
        char num2Char[]=num2.toCharArray();
        int num1Index=num1Char.length-1;
        int num2Index=num2Char.length-1;
        int carry=0;
        int res=0;
        char ans[]=new char[(num1Index>num2Index?num1Index+2:num2Index+2)];
        int ansIndex=ans.length-1;
        while(num1Index>=0 || num2Index>=0)
        {
            res=0;
            if(num1Index>=0)
                res+=(num1Char[num1Index--]-'0');
            if(num2Index>=0)
                res+=(num2Char[num2Index--]-'0');
            ans[ansIndex--]=(char)((res+carry)%10+'0');
            carry=(res+carry)/10;
        }
        ans[0]=(carry==0?'0':'1');
        
        /*
        public String(int[] codePoints,int offset,int count)
            codePoints - Array that is the source of Unicode code points
            offset - The initial offset
            count - The length
        */ 
        if (carry==0)
            return new String(ans,1,ans.length-1);
        else
            return new String(ans);          
    }
}

=============================================================================================================================

class Solution {
    public String addStrings(String num1, String num2) {
        int len=Math.max(num1.length(),num2.length())+1;
        char ans[]=new char[len];
        int carry=0;
        for(int i=num1.length()-1,j=num2.length()-1,k=ans.length-1;i>=0 || j>=0;i--,j--,k--)
        {
            int sum=0;
            if(i>=0)    sum+=num1.charAt(i)-'0';
            if(j>=0)    sum+=num2.charAt(j)-'0';
            ans[k]= (char)((sum+carry)%10+'0');
            carry= ((sum+carry)>=10)?1:0;                
        }
        if(carry==1)    ans[0]='1';
        
        return carry==1?new String(ans):new String(ans,1,ans.length-1); 
    }
}

=============================================================================================================================
=============================================================================================================================
=============================================================================================================================
