https://leetcode.com/problems/sqrtx/?tab=Description
Runtime: 3 ms
You are here! 
Your runtime beats 19.16% of java submissions.
https://leetcode.com/submissions/detail/95168755/


public class Solution {
    public int mySqrt(int x) {                   
        return (int)binarySearch(x);
    }
    
    public long binarySearch(int x)
    {
    //使用long的原因是,測資他媽超大的...用int 會overflowXD
    //反正這種由小到大排列的,都可以用二元搜尋,只是條件要稍微改一下而已.
        long left=0;
        long right=x;
        long index=0;
        long val=0;
        
        while(left<=right)
        {
            index=(left+right)/2;
            val=index*index;
            if( val==x )
                return index;
            else if(val > x)
                right=index-1;
            else if(val < x)
                left=index+1;
        }
        return right;
    }
}


========================================================
--------------------------------------------------------

https://leetcode.com/submissions/detail/95167483/
Runtime: 2 ms
You are here! 
Your runtime beats 76.19% of java submissions.

直接使用JAVA內建的function
public class Solution {
    public int mySqrt(int x) {
        return (int)Math.sqrt(x);
    }
}

========================================================
--------------------------------------------------------
https://leetcode.com/submissions/detail/95169353/
Runtime: 3 ms
You are here! 
Your runtime beats 19.16% of java submissions.

//Math.sqrt 的實作方法.
public class Solution {
    public int mySqrt(int x) {
                   
        double c = x;
        double epsilon = 1e-10;    // relative error tolerance
        double t = c;              // estimate of the square root of c

        // repeatedly apply Newton update step until desired precision is achieved
        while (Math.abs(t - c/t) > epsilon*t) {
            t = (c/t + t) / 2.0;
        }
        return (int)t;
    }
}
