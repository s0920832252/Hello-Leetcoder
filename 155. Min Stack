https://leetcode.com/problems/min-stack/?tab=Description
Runtime: 126 ms
You are here! 
Your runtime beats 37.48% of java submissions.
https://leetcode.com/submissions/detail/95242968/


public class MinStack {
    private Stack<Integer> stack;
    private Stack<Integer> minStack;

    public MinStack() {
        stack = new Stack<Integer>();
        minStack = new Stack<Integer>();
    }

    public void push(int number) {
        stack.push(number);
        if (minStack.empty() == true)
            minStack.push(number);
        else {
        // 这里考虑的相等的情况也会继续push
        if (minStack.peek() >= number)
            minStack.push(number);
        }
    }

    public int pop() {
        if (stack.peek().equals(minStack.peek()) ) 
            minStack.pop();
        return stack.pop();
    }
    
    public int top() {
        return stack.peek();
    }

    public int getMin() {
        return minStack.peek();
    }
}

=================
===================


https://leetcode.com/problems/min-stack/?tab=Description
Runtime: 123 ms
You are here! 
Your runtime beats 43.78% of java submissions
https://leetcode.com/submissions/detail/95242824/


public class MinStack {

    /** initialize your data structure here. */
    public int min=Integer.MAX_VALUE;
    Stack<Integer> stack = new Stack<Integer>();
    
    public void push(int x) {
        if(x<=min)
        {
            stack.push(min);
            min=x;
        }
        stack.push(x);
    }
    
    public void pop() {
        int value=stack.pop();
        if(value==min)
            min=stack.pop();
    }
    
    public int top() {
        return stack.peek();
    }
    
    public int getMin() {
        return min;
    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(x);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */
 
 
 ===================
 ==================
 
 https://leetcode.com/problems/min-stack/?tab=Description
Runtime: 108 ms
You are here! 
Your runtime beats 82.82% of java submissions
https://leetcode.com/submissions/detail/95246128/



public class MinStack {

    /** initialize your data structure here. */
    public class StackRecored
    {
        public int value,min;
        public StackRecored other;
        
        public StackRecored(int value, int min) {
            this.value = value;
            this.min = min;
        }
    }
    
    public StackRecored top;
    
    public void push(int x) {
        if(top==null)
            top=new StackRecored(x,x);
        else
        {
            StackRecored newNode=new StackRecored(x,Math.min(x,top.min));
            newNode.other=top;
            top=newNode;
        }
    }
    
    public void pop() {
        if(top!=null)
            top=top.other;
    }
    
    public int top() {
        return top.value;
    }
    
    public int getMin() {
        return top.min;
    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(x);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */
