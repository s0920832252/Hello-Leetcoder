https://leetcode.com/problems/merge-two-sorted-lists/#/description
Runtime: 19 ms
You are here! 
Your runtime beats 19.69 % of java submissions
https://leetcode.com/submissions/detail/103150766/
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
 
 //基本的list合併.  概念是,開一個list ans,然後拿l1,l2開始逐項比大小.並且將比較小那一個記錄在ans
public class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        ListNode ans=new ListNode(0),point;
        point=ans;
        while(l1!=null && l2!=null)
        {
            if(l1.val<=l2.val)
            {
                point.next=new ListNode(l1.val);
                l1=l1.next;
            }
            else
            {
                point.next=new ListNode(l2.val);
                l2=l2.next;
            }
            point=point.next;
        }
        if(l1==null)
            point.next=l2;
        if(l2==null)
            point.next=l1;
        return ans.next;
    }
}

==========================================================================================================
==========================================================================================================
Runtime: 14 ms
You are here! 
Your runtime beats 93.06 % of java submissions.
https://leetcode.com/submissions/detail/103150706/

//節省產生一個新的ListNode的值的時間,直接讓point指到那一個比較小的直.
public class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        ListNode ans=new ListNode(0),point;
        point=ans;
        while(l1!=null && l2!=null)
        {
            if(l1.val<=l2.val)
            {
                point.next=l1;
                l1=l1.next;
            }
            else
            {
                point.next=l2;
                l2=l2.next;
            }
            point=point.next;
        }
        if(l1==null) 
            point.next=l2;
        if(l2==null) 
            point.next=l1;            
        return ans.next;
    }
}


==========================================================================================================
==========================================================================================================
Runtime: 13 ms
You are here! 
Your runtime beats 99.58 % of java submissions.
https://leetcode.com/submissions/detail/103150472/

//別人的做法,  不過真他媽天才....竟然用地回= =
//節省產生list ans 以及相關point操作記錄的時間.
public class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        if(l1==null)
            return l2;
        if(l2==null)
            return l1;
        if(l1.val<l2.val)
        {
            l1.next=mergeTwoLists(l1.next,l2);
            return l1;
        }
        else
        {
            l2.next=mergeTwoLists(l1,l2.next);
            return l2;
        }
    }  
}


===========================================
===========================================

# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
        
    def mergeTwoLists(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        if not l1:
            return l2
        if not l2:
            return l1
        if l1.val<=l2.val:
            l1.next=self.mergeTwoLists(l1.next, l2)
            return l1
        else:
            l2.next=self.mergeTwoLists(l1, l2.next)
            return l2
