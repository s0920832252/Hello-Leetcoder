0https://leetcode.com/problems/roman-to-integer/
Runtime: 99 ms
You are here! 
Your runtime beats 65.78% of java submissions.
https://leetcode.com/submissions/detail/92511027/

//eg: "DCXXI"  做法是: 由右而左的,依序讀一個字並記錄上一個字,依據這兩字的大小判斷是否為XC這種特殊減法字元.
// 後來看到別人的作法,並不用Map儲存, 而是用Switch去做文字以及數字的轉換(額外寫一個函數), 跑兩次就可以得到兩個字的數字了.
// 而且蠻快的XDD:
public class Solution {
    public int romanToInt(String s) {
        Map<Character,Integer> dict = new HashMap<Character,Integer>();
        dict.put('I',1);
        dict.put('V',5);
        dict.put('X',10);
        dict.put('L',50);
        dict.put('C',100);
        dict.put('D',500);
        dict.put('M',1000);
        char str[]=s.toCharArray();
        int ans=dict.get(str[str.length-1]);
        int curValue=0;
        for(int i=str.length-2;i>=0;i--)
        {
            curValue=dict.get(str[i]);
            if(curValue<dict.get(str[i+1]))
                ans-=curValue;
            else
                ans+=curValue;
        }
        return ans;
    }
}

-----------------------------------------------------------------------
-----------------------------------------------------------------------
-----------------------------------------------------------------------

https://leetcode.com/problems/roman-to-integer/
Runtime: 96 ms
You are here! 
Your runtime beats 76.04% of java submissions
https://leetcode.com/submissions/detail/92511010/


public class Solution {
    public int romanToInt(String s) {
        //由右往左讀字元,但把特殊字元(eg:IV)隔開,這樣可以一次讀兩個字.或是一個字.
        Map<String,Integer> dict = new HashMap<String,Integer>();
        dict.put("I",1);
        dict.put("V",5);
        dict.put("X",10);
        dict.put("L",50);
        dict.put("C",100);
        dict.put("D",500);
        dict.put("M",1000);
        
        Map<String,Integer> dict2 = new HashMap<String,Integer>();
        dict2.put("IV",4);
        dict2.put("IX",9);
        dict2.put("XL",40);
        dict2.put("XC",90);
        dict2.put("CD",400);
        dict2.put("CM",900);
        
        if(s.length()==1) return dict.get(s);
        
        int end,ans;
        if (dict2.containsKey(s.substring(s.length()-2)))
        {    
            end=s.length()-2;
            ans=dict2.get(s.substring(end));
        }
        else 
        {
            end=s.length()-1;
            ans=dict.get(s.substring(end));
        }
        
        for(int index=0;index<end;)
        {
            if(dict2.containsKey(s.substring(index,index+2)))
            {
                ans+=dict2.get(s.substring(index,index+2));
                index+=2;
            }
            else
            {
                ans+=dict.get(s.substring(index,index+1));
                index++;
            }
        }
        return ans;
    }
}



===============================
===============================

Runtime: 88 ms
You are here! 
Your runtime beats 94.79 % of java submissions.
https://leetcode.com/submissions/detail/121172879/

     //若是由左往右讀的話, 則可發現數字必定是由大到小排列.
        //例如100若是出現過了,則後面不可能再出現比100還要大的數字.
        //以此方式,即可做到一次走兩個字元或是一個字元.

class Solution {
    public int romanToInt(String s) {
        String sign[]={"M","CM","DC","D","CD","C","XC","LX","L","XL","X","IX","VI","V","IV","I"};
        int value[]={  1000,900,600, 500,400, 100,90  ,60  ,50 ,40  ,10 ,9   , 6  ,5  , 4  ,1 };
        
        int ans=0;
        for(int digit=0,strIndex=0;digit<sign.length && strIndex<s.length();)
        {
            int digitSize=sign[digit].length();
            if( (s.length()>=(strIndex+digitSize)) && s.substring(strIndex,strIndex+digitSize).equals(sign[digit]))
            {
                ans+=value[digit];
                strIndex+=digitSize;
            }
            else
                digit++;            
        }
        return ans;
    } 
}


===================================
===================================
Runtime: 84 ms
You are here! 
Your runtime beats 98.58 % of java submissions
https://leetcode.com/submissions/detail/121174934/


class Solution {
    public int romanToInt(String s) {
        int[] nums = new int[s.length()];
        for (int i = 0; i < s.length(); i++) {
            switch (s.charAt(i)){
                case 'M':
                    nums[i]=1000;
                    break;
                case 'D':
                    nums[i]=500;
                    break;
                case 'C':
                    nums[i]=100;
                    break;
                case 'L':
                    nums[i]=50;
                    break;
                case 'X' :
                    nums[i]=10;
                    break;
                case 'V':
                    nums[i]=5;
                    break;
                case 'I':
                    nums[i]=1;
                    break;
            }
        }
        int sum = 0;
        for (int i = 0; i < s.length(); i++) {
            if (i + 1 < s.length() && nums[i] < nums[i + 1]) {
                sum -= nums[i];
            } else {
                sum += nums[i];
            }
        }
        return sum;        
    }
}
