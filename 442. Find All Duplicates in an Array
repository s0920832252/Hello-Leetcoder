https://leetcode.com/problems/find-all-duplicates-in-an-array/?tab=Description
Runtime: 16 ms
You are here! 
Your runtime beats 84.81% of java submissions
https://leetcode.com/submissions/detail/96213646/

//題目給予Given an array of integers, 1 ≤ a[i] ≤ n (n = size of array),這個資料範圍的限制. 
//我看到這個限制就笑了...果然題目刷久了,有時候都有點條件反射了= ="
//所以就可以用陣列的方式取代Map/Set等方式保存跑過的資料.
//因為就直接run一次陣列所有值, 所以時間複雜度是O(n).

public class Solution {
    public List<Integer> findDuplicates(int[] nums) {
        int elements[]=new int[nums.length];
        List<Integer> ans=new LinkedList<Integer>(); //List 有ArrayList 以及 LinkedList兩種,這邊因為只需要插入,因此使用LinkedList.
        for(int i=0;i<nums.length;i++)
        {
            if(elements[nums[i]-1]==0)
                elements[nums[i]-1]=1;
            else
                ans.add(nums[i]);
        }
        return ans;
    }
}


===========================================
===========================================
https://leetcode.com/submissions/detail/96214142/
Runtime: 54 ms
You are here! 
Your runtime beats 13.03% of java submissions.

先sort後,在跑  也是一種方法

public class Solution {
    public List<Integer> findDuplicates(int[] nums) {
        int elements[]=new int[nums.length];
        List<Integer> ans=new LinkedList<Integer>();
        Arrays.sort(nums);
        
        for(int i=0;i<nums.length-1;i++)
        {
            if(nums[i]==nums[i+1])
            {
                ans.add(nums[i]);
            }
        }
        return ans;
    }
}

======================================================================
======================================================================
https://leetcode.com/submissions/detail/129967481/
Runtime: 14 ms
You are here! 
Your runtime beats 90.42 % of java submissions
//因為1<=num[i]<=n  n=array Size
//所以先將每一個元素配置他應該去的位置,  e.g. 1就去陣列所引0的位置 , 2就去陣列所引1的位置 引此類推
//做完後,相當於排序完了. 只要去看判斷是否有值不存在他應該存在的位置(代表他是重複值).
class Solution {
    public List<Integer> findDuplicates(int[] nums) {
        List<Integer> list=new LinkedList<Integer>();
        
        for(int i=0;i<nums.length;i++)
            while(nums[nums[i]-1]!=nums[i])
                mySwap(nums,nums[i]-1,i);        
        for(int i=0;i<nums.length;i++)
            if((nums[i]-1)!=i)
                list.add(nums[i]);    
        return list;        
    }
    
    public void mySwap(int nums[],int left,int right)
    {
        int temp=nums[left];
        nums[left]=nums[right];
        nums[right]=temp;
    }
}
