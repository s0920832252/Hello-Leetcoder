https://leetcode.com/problems/pascals-triangle-ii/#/description
Runtime: 1 ms
You are here! 
Your runtime beats 89.91 % of java submissions
https://leetcode.com/submissions/detail/103541811/

public class Solution {
    public List<Integer> getRow(int rowIndex) {
       
        List<Integer> ans=new LinkedList<Integer>();
        ans.add(1); 
        
        if(rowIndex==0)
            return ans;
        
        long record=1;        
        for(int i=1;i<rowIndex;i++)
        {
            record=(rowIndex-i+1)*record/i;
            ans.add((int)record);
        }
        ans.add(1); 
        
        return ans;
    }
}

========================
==========================

class Solution {
    public List<Integer> getRow(int rowIndex) {
        List<List<Integer>> pascal=generate(rowIndex+1);
        return pascal.get(rowIndex);
    }
    
    public List<List<Integer>> generate(int numRows) {
        List<List<Integer>> ans=new ArrayList<List<Integer>>();
     
        for(int i=0;i<numRows;i++)
        {
            List<Integer> temp=new ArrayList<Integer>();
            int listSize=i+1;
            for(int j=0;j<listSize;j++)
                temp.add((j==0||j==listSize-1)?1:(ans.get(i-1)).get(j-1)+(ans.get(i-1)).get(j));
            ans.add(temp);
        }
        return ans;        
    }
}
